JOTS is a Java library that allows creation of a SNMP interface from Java Objects.

1. Getting started:

1.1 Creating an SNMP tree is done by using one of the following methods:

	public static SnmpTree createSnmpTree(int[] prefix, Object obj)
	public static SnmpTree createSnmpTree(String mibName, String rootName,
		String parentName, int[] prefix, Object obj, OutputStream mibOutputStream)

1.2 Tree without MIB generation

Creating a tree without a MIB is fairly straight-forward. See section 2.1  to 
see what fields get included in the generated tree.

	public class SomeObject {
		int fieldOne;
		String fieldTwo;
		final SomeObjectType fieldThree;
		...
	}
	
	SomeObject obj = new SomeObject();
	SnmpTree tree = SnmpTreeConstructor.createSnmpTree(new int[] { 1, 3, 6, 1, 4, 1, <some OID> }, obj);

1.3 Tree with MIB generation

Creating a MIB along with the tree can be done by:

	ByteArrayOutputStream mibOutputStream = new ByteArrayOutputStream();

	SomeObject obj = new SomeObject();
	SnmpTree tree = SnmpTreeConstructor.createSnmpTree("<MIB name>",
		"<root entry's name>", "enterprises",
		new int[] { 1, 3, 6, 1, 4, 1, <some OID> }, obj, mibOutputStream);
		
	// Do something with mibOutputStream, such as print it to a file

1.4 Interaction with SNMP4j

1.4.1 Snmp Agent

At this point, you have an SnmpTree object that lets you do gets and sets.
The next step is getting an SNMP agent working. JOTS has an implementation
using SNMP4J. Creating your own using a different SNMP library should not
be too difficult to integrate instead though.

A SNMP agent can be started using an SnmpTree with the following code:

	InetSocketAddress agentAddress = new InetSocketAddress("0.0.0.0", 8161);
	SnmpAgent agent = new SnmpAgent(tree, agentAddress, SnmpAgent.Protocol.udp);

1.4.2 Snmp Trap Receiver

Creating a trap receiver is done in a similar way to creating an agent. For
example, if you want to simply set every trapped OID back into your tree
(say you are mirroring subtree on a different Agent), you could do:

	InetSocketAddress agentAddress = new InetSocketAddress("0.0.0.0", 8162);
	SnmpTrapReceiver receiver = new SnmpTrapReceiver(tree, agentAddress, SnmpAgent.Protocol.udp) {
	  @Override
	  protected void processTrap(CommandResponderEvent request)
	  {
	    for (VariableBinding vb : request.getPDU().getVariableBindings())
	      tree.set(vb.getOid(), vb.getVariable().toString(), true);
	  }
	}

1.3 Tables

SNMP tables map to Java collections (Maps and Lists). Currently, there is no
way to track changes to the collections, so changes will not be tracked
after tree creation. If new entries are added to any collection in the tree
hierarchy, the tree must be recreated.

As a limited workaround, SnmpAgent does support replacing the SnmpTree. This
can be done using the public void updateTree(SnmpTree tree) method. Note
that this may cause odd behavior for in-flight partial requests, such as
from an snmp walk. All currently requests currently processing must complete
before the change takes place.


2. Controlling the tree creation behavior

2.1 Fields

Fields are either included or skipped either through modifiers or annotations.
The first condition encountered in the following list determines whether the 
field is included or skipped.

1. If there is an SnmpInclude annotation, include it
2. If there is an SnmpIgnore annotation, skip it
3. If the field is static or transient, skip it
4. If the field is final, primitive, primitive wrapper, enum or String, include it
5. Skip it

2.2 MIB creation

Annotations on fields can be used to generate comments for a generated MIB file.
For example, given the following object:

public class SomeObject {
	@BooleanInterfaceComment(
		synopsis = "The status of Foo",
		falseSynopsis = "Foo is disabled",
		trueSynopsis = "Foo is enabled")
	boolean fooStatus;
}
  
the following  will appear in the generated MIB:

FooStatus OBJECT-TYPE
	SYNTAX		Boolean
	MAX-ACCESS	read-only
	STATUS		current
	DESCRIPTION
		"The status of Foo
		 'true'  -> Foo is enabled
		 'false' -> Foo is disabled"
	::= { RootEntry 1 }